\section{Introduction}\label{Intro}

\cite{MattB1993}
\cite{JAlex2008}
\cite{Roxana2011}
\cite{SELinux2010}
\cite{Crypto1996}
\cite{Dagon2004}
\cite{SqliteWrapper2000}
\cite{SqliteJDBC2000}
\cite{sqlite2000}
\cite{SqlCipher2008}

Mobile operating system security is becoming one of the most important topic in the computer security field at both the research and industry level. Specifically, due to its popularity and open source property, Googleâ€™s Android OS (operating system) and associated software framework has been widely used as a way to judge security and efficiency without developing costly prototypes. Naturally, the theft prone property of mobile devices continuously challenges our ability to provide a sense of control over data ownership \cite{JAlex2008} \cite{Dagon2004}. To increase control, modern security design uses a combination of encryption and remote encryption key management that allow users to encrypt their file system while allowing fine-grain file access auditing and the ability to suspend future file access after compromising of device. Recent research into Android auditing file system such as Keypad \cite{Roxana2011} has demonstrated high potential for providing private data security. However, Android specific data types such as Contacts and Emails, are stored as entries in local SQLite databases as a single database file, and access is provided through an extension of the ContentProvider class \cite{contactPro}. As a result, the database and can only be audited as a single file access. The use of a auditing file system has proven to be effective in providing users with an encrypted file system while allowing fine-grained file access auditing, and should be advanced further for providing security of Android specific data.

The proposed research tests the effectiveness of auditing file system technique as described in Keypad architecture on Android specific data in its local database. The research approaches this problem from the design side, focusing on the development of a general technique for encrypting SQLite database entry, performing queries on encrypted database, as well as remote database replication and key management. Design of an optimized query performance is considered as motivation for this project, where the last stage goals may include batching of queries on the remote side for performance enhancement. However, the general task of designing a secure and auditable database is outside of the scope of the project at this point.

The method which was, and will be, followed is objective-focused and linear. It consists of three major sequential design stages, with a potential fourth stage. The fourth stage consists of a wide variety of studies which would provide a more detailed and modifiable context for the design developed in stages 1 through 3.

\begin{enumerate}
  \item A typical Android application that utilizes local database storage will be built in JAVA. The application will be used to investigate various ways Android provides access to database content, as well as finding a central point of interception that is general to all application where encryption can be applied with minimal effort and modification of existing system.
  \item The database used in Stage 1 will be duplicated and synchronized on a remote server on a per query base. This includes arbitrary database schema creation, as well as operations such as query, insert or delete. This will allow an audit ability on the remote side of the database entries that are accessed or modified.
  \item The database synchronization technique in Stage 2 will be enhanced with AES encryption with CBC mode. The new technique will allow security and auditing ability on database entry access from the Android application. Optimization techniques will be investigated such as database connection sharing between thread on the remote server, as well as batch query execution when queries arrive at a high frequency.
  \item The scheme from Stage 3 will be put through a wide range of studies in order to study its efficiency under real workloads. Different encryption technique such as per-row versus per-column database entry encryption will also be investigated to observe the efficiency.
\end{enumerate}

In successfully accomplishing the above four stages, the goals met will include the complete development and documentation of the auditing database system scheme as well as its application in the Android OS. The proposed research will give insight to allowing audit capability on general database system located in mobile operating system.
